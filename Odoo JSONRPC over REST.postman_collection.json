{
	"info": {
		"_postman_id": "22e2ccb6-a08e-43aa-a0f0-eecd9992c625",
		"name": "Odoo JSONRPC over REST",
		"description": "# 📄 Get started here\n\nThis example only demonstrates how JSONRPC can be used with POSTMAN (rest) to leverage Odoo RPC (XMLRPC/JSONRPC) , It is advised to use Odoo [External API](https://www.odoo.com/documentation/17.0/developer/reference/external_api.html#) and [ORM API](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#reference-orm-domains) documentation.\n\nIf you have more questions, please get in touch with Odoo Sales by scheduling a demo at [https://www.odoo.com/contactus](https://www.odoo.com/contactus)\n\nThis Postman collection only shows few generic methods of ORM that can be used across all object as long as API user has access to the given model.\n\nTo use this collection \\`{{url}}\\`, \\`{{db}}\\`, \\`{{username}}\\` and \\`{{password}}\\` need to be configured in the collection variable section of the collection\n\nOnce variables are you wanna Auticate user using [Authenticate User ](https://www.postman.com/jam-odoo/workspace/odoo-jsonrpc/request/36285595-57277329-663a-4a89-b786-004697f9e039) request.\n\nHere's [link](https://github.com/odoo/odoo/blob/17.0/odoo/addons/base/controllers/rpc.py#L152) implmentation of JSON RPC endpoint using http route in Odoo source code.\n\nTo use this collection run each request in created sequence of listing in the Logging In and Object Services folder",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4428682",
		"_collection_link": "https://www.postman.com/odoo44/odoo-api/collection/fsmajyp/odoo-jsonrpc-over-rest?action=share&source=collection_link&creator=4428682"
	},
	"item": [
		{
			"name": "Logging in (common services)",
			"item": [
				{
					"name": "Check server version",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"const request_id = lodash.random(1000000000,9999999999);",
									"pm.collectionVariables.set(\"request_id\", request_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"common\",\n        \"method\": \"version\",\n        \"args\": [\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/jsonrpc",
							"host": [
								"{{url}}"
							],
							"path": [
								"jsonrpc"
							]
						},
						"description": "The \\`version\\` method can be called from the `common` namespace to get version details."
					},
					"response": []
				},
				{
					"name": "Authenticate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"console.log('User id : '+jsonData.result)",
									"pm.collectionVariables.set(\"uid\", jsonData.result);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"const request_id = lodash.random(1000000000,9999999999);",
									"pm.collectionVariables.set(\"request_id\", request_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"common\",\n        \"method\": \"authenticate\",\n        \"args\": [\n            \"{{db}}\",\n            \"{{username}}\",\n            \"{{password}}\",\n            {}\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/jsonrpc",
							"host": [
								"{{url}}"
							],
							"path": [
								"jsonrpc"
							]
						},
						"description": "Odoo requires users of the API to be authenticated before they can query most data.\n\nThe `xmlrpc/2/common` endpoint provides meta-calls which don’t require authentication, such as the authentication itself or fetching version information. To verify if the connection information is correct before trying to authenticate, the simplest call is to ask for the server’s version. The authentication itself is done through the `authenticate` function and returns a user identifier (`uid`) used in authenticated calls instead of the login."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"common\",\n        \"method\": \"authenticate\",\n        \"args\": [\n            \"{{db}}\",\n            \"{{username}}\",\n            \"{{password}}\",\n            {}\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/jsonrpc",
									"host": [
										"{{url}}"
									],
									"path": [
										"jsonrpc"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": null,\n    \"result\": 2\n}"
						}
					]
				}
			],
			"description": "Here's [link](https://github.com/odoo/odoo/blob/17.0/odoo/service/common.py) to Source code that show all service and method offered by the common endpoint\n\nThe \\`common\\` endpoint has follwing method\n\n- `version`\n    \n- `about`\n    \n- `authenticate`\n    \n- `login` (same as authenticate)"
		},
		{
			"name": "Object (model) Service",
			"item": [
				{
					"name": "Checking Access Rights",
					"item": [
						{
							"name": "Check Access Rights",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const lodash = require('lodash');",
											"const request_id = lodash.random(1000000000,9999999999);",
											"pm.collectionVariables.set(\"request_id\", request_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"object\",\n        \"method\": \"execute_kw\",\n        \"args\": [\n            \"{{db}}\",\n            \"{{uid}}\",\n            \"{{password}}\",\n            \"res.partner\",\n            \"check_access_rights\",\n            [\"read\"],\n            {\"raise_exception\": false}\n        ],\n        \"id\": {{request_id}}\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/jsonrpc",
									"host": [
										"{{url}}"
									],
									"path": [
										"jsonrpc"
									]
								}
							},
							"response": []
						}
					],
					"description": "The Access Rights technically known as Access Control List (the access rigths are defined and stored in the \\`ir.model.access\\` model) which is responsible for validating the operational security\n\nCalling the `check_access_rights(operation)` method on a recordset, this verifies whether the given user has access to the model itself. Check Access Rights is helper method the help validate that if the given user has acccess to perform `create`, `read`, `write`, or `unlink` operation\n\n### Parameters\n\n- param str `operation`: one of `create`, `read`, `write`, `unlink`\n    \n- :param bool `raise_exception`: whether an exception should be raise if operation is forbidden\n    \n\n### **Return**\n\nThe \\``check_access_rights`\\` returns boolean indicating weather the user can perform given operation"
				},
				{
					"name": "Searching Records",
					"item": [
						{
							"name": "Searching All Records",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const lodash = require('lodash');",
											"const request_id = lodash.random(1000000000,9999999999);",
											"pm.collectionVariables.set(\"request_id\", request_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"//console.log('searched_record_ids : '+jsonData.result)",
											"pm.collectionVariables.set(\"searched_record_ids\", jsonData.result);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"object\",\n        \"method\": \"execute_kw\",\n        \"args\": [\n            \"{{db}}\",\n            \"{{uid}}\",\n            \"{{password}}\",\n            \"res.partner\",\n            \"search\",\n            [[]]\n        ],\n        \"id\": {{request_id}}\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/jsonrpc",
									"host": [
										"{{url}}"
									],
									"path": [
										"jsonrpc"
									]
								},
								"description": "To search all record pss epty domain value \\`\\[\\]\\` which will return record ids of all active record that user can access (limited to user access)"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"object\",\n        \"method\": \"execute_kw\",\n        \"args\": [\n            {{database}},\n            \"{{uid}}\",\n            \"{{password}}\",\n            \"res.partner\",\n            \"search\",\n            []\n        ],\n        \"id\": {{request_id}}\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/jsonrpc",
											"host": [
												"{{url}}"
											],
											"path": [
												"jsonrpc"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": null,\n    \"result\": [\n        3,\n        1\n    ]\n}"
								}
							]
						},
						{
							"name": "Search and Pagination",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const lodash = require('lodash');",
											"const request_id = lodash.random(1000000000,9999999999);",
											"pm.collectionVariables.set(\"request_id\", request_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"object\",\n        \"method\": \"execute_kw\",\n        \"args\": [\n            \"{{db}}\",\n            \"{{uid}}\",\n            \"{{password}}\",\n            \"res.partner\",\n            \"search\",\n            [[]],\n            {\"offset\": 1, \"limit\": 2}\n        ],\n        \"id\": {{request_id}}\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/jsonrpc",
									"host": [
										"{{url}}"
									],
									"path": [
										"jsonrpc"
									]
								}
							},
							"response": []
						},
						{
							"name": "Counting records",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const lodash = require('lodash');",
											"const request_id = lodash.random(1000000000,9999999999);",
											"pm.collectionVariables.set(\"request_id\", request_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"object\",\n        \"method\": \"execute_kw\",\n        \"args\": [\n            \"{{db}}\",\n            \"{{uid}}\",\n            \"{{password}}\",\n            \"res.partner\",\n            \"search_count\",\n            [[]]\n        ],\n        \"id\": {{request_id}}\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/jsonrpc",
									"host": [
										"{{url}}"
									],
									"path": [
										"jsonrpc"
									]
								}
							},
							"response": []
						},
						{
							"name": "Name Search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const lodash = require('lodash');",
											"const request_id = lodash.random(1000000000,9999999999);",
											"pm.collectionVariables.set(\"request_id\", request_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"object\",\n        \"method\": \"execute_kw\",\n        \"args\": [\n            \"{{db}}\",\n            \"{{uid}}\",\n            \"{{password}}\",\n            \"res.partner\",\n            \"name_search\",\n            [],\n            {\"name\": \"postman\"}\n        ],\n        \"id\": {{request_id}}\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/jsonrpc",
									"host": [
										"{{url}}"
									],
									"path": [
										"jsonrpc"
									]
								}
							},
							"response": []
						}
					],
					"description": "## Searching Records\n\nRecords can be listed and filtered via [<code>search()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.search).\n\nThis example uses `res.partner` module of Odoo for searching record. Model \\`res.partner\\` model can be replaced wqith any model need to be accessed as long as user has correct access rights to the model\n\nORM uses \\``search`\\` method to serach record as neede, for search flitering it uses [search domain](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#reference-orm-domains) for passing the filter conditions.\n\nThe search domain is A domain is a list of criteria, each criterion being a triple (either a `list` or a `tuple`)of `(field_name, operator, value)`\n\nand it use [Polish notiation ](https://en.wikipedia.org/wiki/Polish_notation) for evlauting the search cindution in set of triples\n\nRead more about About API Call and Search method in Odoo.com documentation\n\n#### Parameters\n\n- **domain** – [A search domain](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#reference-orm-domains). Use an empty list to match all records.\n    \n- **offset** ([<i>int</i>](https://docs.python.org/3/library/functions.html#int)) – number of results to ignore (default: none) - used for pagination\n    \n- **limit** ([<i>int</i>](https://docs.python.org/3/library/functions.html#int)) – maximum number of records to return (default: all) - used for pagination\n    \n- **order** ([<i>str</i>](https://docs.python.org/3/library/stdtypes.html#str)) – sort string (asc | desc)\n    \n\n### <u>Return</u>\n\nThe [<code>search()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.search)returns list of record ids \\`\\[\\]\\` matrching the given domain filter\n\n### <u><b>Additional Resources</b></u>\n\n- [Search API call Documentation](https://www.odoo.com/documentation/17.0/developer/reference/external_api.html#list-records)\n    \n- [ORM Search Method Documentation](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.search)\n    \n\n_**Note: It is best to use Odoo.com doucmentation for refernfces to ORM API for most updated information, short description given here to kick off the converstaion and take is right direction.**_\n\n# Variants of Search\n\nTheir are more variants of search methods which act as helper method to achieve certain operation ore quickly\n\n## Counting records\n\nReturns the number of records in the current model matching [the provided domain](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html?highlight=name_search#reference-orm-domains).\n\n#### Parameters\n\n- **domain** – [A search domain](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html?highlight=name_search#reference-orm-domains). Use an empty list to match all records.\n    \n- **limit** – maximum number of record to count (upperbound) (default: all)\n    \n\n#### Returns\n\nThe \\`[search_count](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html?highlight=name_search)\\` returns integer with count of reocrd matchin provided domain\n\n## Name Search\n\nSearch for records that have a display name matching the given `name` pattern when compared with the given `operator`, while also matching the optional search domain (`args`).\n\nThis is used for example to provide suggestions based on a partial value for a relational field. Should usually behave as the reverse of `display_name`, but that is not guaranteed.\n\nThis method is equivalent to calling [<code>search()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html?highlight=name_search#odoo.models.Model.search) with a search domain based on `display_name` and mapping id and display_name on the resulting search.\n\n#### Parameters\n\n- **name** ([<i>str</i>](https://docs.python.org/3/library/stdtypes.html#str)) – the name pattern to match\n    \n- **args** ([<i>list</i>](https://docs.python.org/3/library/stdtypes.html#list)) – optional search domain (see [<code>search()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html?highlight=name_search#odoo.models.Model.search) for syntax), specifying further restrictions\n    \n- **operator** ([<i>str</i>](https://docs.python.org/3/library/stdtypes.html#str)) – domain operator for matching `name`, such as `'like'` or `'='`.\n    \n- **limit** ([<i>int</i>](https://docs.python.org/3/library/functions.html#int)) – optional max number of records to return\n    \n\n#### Returns\n\nThe [<code>name_search</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html?highlight=name_search) return list of reocrd in the pairs `(id, display_name)` for all matching records."
				},
				{
					"name": "Reading Records",
					"item": [
						{
							"name": "Read records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const lodash = require('lodash');",
											"const request_id = lodash.random(1000000000,9999999999);",
											"pm.collectionVariables.set(\"request_id\", request_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"object\",\n        \"method\": \"execute_kw\",\n        \"args\": [\n            \"{{db}}\",\n            \"{{uid}}\",\n            \"{{password}}\",\n            \"res.partner\",\n            \"read\",\n            [[{{searched_record_ids}}]],\n            {\"fields\": [\"name\", \"email\", \"phone\"]}\n        ],\n        \"id\": {{request_id}}\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/jsonrpc",
									"host": [
										"{{url}}"
									],
									"path": [
										"jsonrpc"
									]
								},
								"description": "This example uses `res.partner` module of Odoo for searching record. Model \\`res.partner\\` model can be replaced wqith any model need to be accessed as long as user has correct access rights to the model\n\nORM uses \\`read\\` method to recrd record for the given record ids , usually prefetched using 'search' method\n\nRead more about About API Call and \\`read\\` method in Odoo.com documentation\n\n- [Read API Call Documentation](https://www.odoo.com/documentation/17.0/developer/reference/external_api.html#read-records)\n    \n- [ORM Read Method Documentation](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.read)\n    \n\n_**Note: It is best to use Odoo.com doucmentation for refernfces to ORM API for most updated information, short description given here to kick off the converstaion and take is right direction.**_"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"object\",\n        \"method\": \"execute_kw\",\n        \"args\": [\n            \"{{db}}\",\n            \"{{uid}}\",\n            \"{{password}}\",\n            \"res.partner\",\n            \"read\",\n            [[{{searched_record_ids}}]],\n            {\"fields\": [\"name\", \"country_id\", \"comment\"]}\n        ],\n        \"id\": {{request_id}}\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/jsonrpc",
											"host": [
												"{{url}}"
											],
											"path": [
												"jsonrpc"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": null,\n    \"result\": [\n        {\n            \"id\": 3,\n            \"name\": \"Edu APIdemp\",\n            \"country_id\": false,\n            \"comment\": false\n        },\n        {\n            \"id\": 1,\n            \"name\": \"edu-apidemo\",\n            \"country_id\": [\n                233,\n                \"United States\"\n            ],\n            \"comment\": false\n        }\n    ]\n}"
								},
								{
									"name": "Invalid request Server Trackback",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"object\",\n        \"method\": \"execute_kw\",\n        \"args\": [\n            \"{{db}}\",\n            \"{{uid}}\",\n            \"{{password}}\",\n            \"res.partner\",\n            \"read\",\n            [{{searched_record_ids}}],\n            {\"fields\": [\"name\", \"country_id\", \"comment\"]}\n        ],\n        \"id\": {{request_id}}\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/jsonrpc",
											"host": [
												"{{url}}"
											],
											"path": [
												"jsonrpc"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": null,\n    \"error\": {\n        \"code\": 200,\n        \"message\": \"Odoo Server Error\",\n        \"data\": {\n            \"name\": \"builtins.TypeError\",\n            \"debug\": \"Traceback (most recent call last):\\n  File \\\"/home/odoo/src/odoo/17.0/odoo/http.py\\\", line 1764, in _serve_db\\n    return service_model.retrying(self._serve_ir_http, self.env)\\n  File \\\"/home/odoo/src/odoo/17.0/odoo/service/model.py\\\", line 133, in retrying\\n    result = func()\\n  File \\\"/home/odoo/src/odoo/17.0/odoo/http.py\\\", line 1791, in _serve_ir_http\\n    response = self.dispatcher.dispatch(rule.endpoint, args)\\n  File \\\"/home/odoo/src/odoo/17.0/odoo/http.py\\\", line 1995, in dispatch\\n    result = self.request.registry['ir.http']._dispatch(endpoint)\\n  File \\\"/home/odoo/src/odoo/17.0/addons/website/models/ir_http.py\\\", line 235, in _dispatch\\n    response = super()._dispatch(endpoint)\\n  File \\\"/home/odoo/src/odoo/17.0/odoo/addons/base/models/ir_http.py\\\", line 222, in _dispatch\\n    result = endpoint(**request.params)\\n  File \\\"/home/odoo/src/odoo/17.0/odoo/http.py\\\", line 741, in route_wrapper\\n    result = endpoint(self, *args, **params_ok)\\n  File \\\"/home/odoo/src/custom/trial/saas_trial/controllers/main.py\\\", line 314, in jsonrpc\\n    res = super(OdooRPC, self).jsonrpc(service, method, args)\\n  File \\\"/home/odoo/src/odoo/17.0/odoo/http.py\\\", line 741, in route_wrapper\\n    result = endpoint(self, *args, **params_ok)\\n  File \\\"/home/odoo/src/odoo/17.0/odoo/addons/base/controllers/rpc.py\\\", line 155, in jsonrpc\\n    return dispatch_rpc(service, method, args)\\n  File \\\"/home/odoo/src/odoo/17.0/odoo/http.py\\\", line 391, in dispatch_rpc\\n    return dispatch(method, params)\\n  File \\\"/home/odoo/src/odoo/17.0/odoo/service/model.py\\\", line 37, in dispatch\\n    res = execute_kw(db, uid, *params[3:])\\n  File \\\"/home/odoo/src/odoo/17.0/odoo/service/model.py\\\", line 59, in execute_kw\\n    return execute(db, uid, obj, method, *args, **kw or {})\\n  File \\\"/home/odoo/src/odoo/17.0/odoo/service/model.py\\\", line 65, in execute\\n    res = execute_cr(cr, uid, obj, method, *args, **kw)\\n  File \\\"/home/odoo/src/odoo/17.0/odoo/service/model.py\\\", line 50, in execute_cr\\n    result = retrying(partial(odoo.api.call_kw, recs, method, args, kw), env)\\n  File \\\"/home/odoo/src/odoo/17.0/odoo/service/model.py\\\", line 133, in retrying\\n    result = func()\\n  File \\\"/home/odoo/src/odoo/17.0/odoo/api.py\\\", line 468, in call_kw\\n    result = _call_kw_multi(method, model, args, kwargs)\\n  File \\\"/home/odoo/src/odoo/17.0/odoo/api.py\\\", line 453, in _call_kw_multi\\n    result = method(recs, *args, **kwargs)\\nTypeError: BaseModel.read() got multiple values for argument 'fields'\\n\",\n            \"message\": \"BaseModel.read() got multiple values for argument 'fields'\",\n            \"arguments\": [\n                \"BaseModel.read() got multiple values for argument 'fields'\"\n            ],\n            \"context\": {}\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Read Grouped Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const lodash = require('lodash');",
											"const request_id = lodash.random(1000000000,9999999999);",
											"pm.collectionVariables.set(\"request_id\", request_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"object\",\n        \"method\": \"execute_kw\",\n        \"args\": [\n            \"{{db}}\",\n            \"{{uid}}\",\n            \"{{password}}\",\n            \"res.partner\",\n            \"read_group\",\n            [[], [\"name\", \"email\", \"country_id\"], [\"country_id\"]],\n            {}\n        ],\n        \"id\": {{request_id}}\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/jsonrpc",
									"host": [
										"{{url}}"
									],
									"path": [
										"jsonrpc"
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"object\",\n        \"method\": \"execute_kw\",\n        \"args\": [\n            \"{{db}}\",\n            \"{{uid}}\",\n            \"{{password}}\",\n            \"res.partner\",\n            \"read_group\",\n            [[], [\"name\", \"email\", \"country_id\"], [\"country_id\"]],\n            {\"fields\": [\"name\", \"country_id\", \"comment\"]}\n        ],\n        \"id\": {{request_id}}\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": null,\n    \"result\": [\n        {\n            \"country_id\": [\n                233,\n                \"United States\"\n            ],\n            \"country_id_count\": 1,\n            \"__domain\": [\n                [\n                    \"country_id\",\n                    \"=\",\n                    233\n                ]\n            ]\n        },\n        {\n            \"country_id\": false,\n            \"country_id_count\": 2,\n            \"__domain\": [\n                [\n                    \"country_id\",\n                    \"=\",\n                    false\n                ]\n            ]\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Search and Read",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const lodash = require('lodash');",
											"const request_id = lodash.random(1000000000,9999999999);",
											"pm.collectionVariables.set(\"request_id\", request_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"object\",\n        \"method\": \"execute_kw\",\n        \"args\": [\n            \"{{db}}\",\n            \"{{uid}}\",\n            \"{{password}}\",\n            \"res.partner\",\n            \"read\",\n            [[{{searched_record_ids}}]],\n            {\"fields\": [\"name\", \"country_id\", \"comment\"]}\n        ],\n        \"id\": {{request_id}}\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"object\",\n        \"method\": \"execute_kw\",\n        \"args\": [\n            \"{{db}}\",\n            \"{{uid}}\",\n            \"{{password}}\",\n            \"res.partner\",\n            \"read\",\n            [[{{searched_record_ids}}]],\n            {\"fields\": [\"name\", \"country_id\", \"comment\"]}\n        ],\n        \"id\": {{request_id}}\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": null
								}
							]
						}
					],
					"description": "# Read\n\nRecord data are accessible via the [<code>read()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.read) method, which takes a list of ids (as returned by [<code>search()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.search)), and optionally a list of fields to fetch. By default, it fetches all the fields the current user can read, which tends to be a huge amount.\n\n#### Parameters\n\n- **fields** ([<i>list</i>](https://docs.python.org/3/library/stdtypes.html#list)) – field names to return (default is all fields)\n    \n- **load** ([<i>str</i>](https://docs.python.org/3/library/stdtypes.html#str)) – loading mode, currently the only option is to set to `None` to avoid loading the `display_name` of m2o fields\n    \n\n#### <u><b>Return</b></u>\n\nThe [<code>read()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.read)method returns a list of dictionaries mapping field names to their values, with one dictionary per record`[{field1: value1, ....},{field1: value1, ....}...]`\n\n### <u>Additional Resources</u>\n\n- [Odoo Read API Documentation](https://www.odoo.com/documentation/17.0/developer/reference/external_api.html#read-records)\n    \n- [ORM Read Method Documentation](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.read)\n    \n\n# Search Read\n\nVery often searching and reading operation will have to be called tandem to search and then read record to smplify this Odoo offers \\`search_read\\` method which, as its name suggests, is equivalent to a [<code>search()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.search) followed by a [<code>read()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.read), but avoids having to perform two requests and keep ids around.\n\nIts arguments are similar to [<code>search()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.search)’s, but it can also take a list of `fields` (like [<code>read()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.read), if that list is not provided it will fetch all fields of matched records).\n\n#### Parameters\n\n- :param domain: Search domain, see `args` parameter in :meth:`search`.\n    \n- :param fields: List of fields to read, see `fields` parameter in :meth:`read`.\n    \n- :param int offset: Number of records to skip, see `offset` parameter in :meth:`search`.\n    \n- :param int limit: Maximum number of records to return, see `limit` parameter in :meth:`search`.\n    \n- :param order: Columns to sort result, see `order` parameter in :meth:`search`.\n    \n- :param read_kwargs: All read keywords arguments used to call\n    \n    - `read(..., **read_kwargs)` method e.g. you can use\n        \n    - `search_read(..., load='')` in order to avoid computing display_name\n        \n\n#### Returns\n\nThe \\`search_read\\` retuns a list of dictionaries containing the asked fields.  \n\n## Read Group\n\nGet the list of records in list view grouped by the given `groupby` fields.\n\n#### Parameters\n\n- **domain** ([<i>list</i>](https://docs.python.org/3/library/stdtypes.html#list)) – [A search domain](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html?highlight=name_search#reference-orm-domains). Use an empty list to match all records.\n    \n- list of fields present in the list view specified on the object. Each element is either ‘field’ (field name, using the default aggregation), or ‘field:agg’ (aggregate field with aggregation function ‘agg’), or ‘name:agg(field)’ (aggregate field with ‘agg’ and return it as ‘name’). The possible aggregation functions are the ones provided by [PostgreSQL](https://www.postgresql.org/docs/current/static/functions-aggregate.html) and ‘count_distinct’, with the expected meaning.\n    \n- **groupby** ([<i>list</i>](https://docs.python.org/3/library/stdtypes.html#list)) – list of groupby descriptions by which the records will be grouped. A groupby description is either a field (then it will be grouped by that field) or a string ‘field:granularity’. Right now, the only supported granularities are ‘day’, ‘week’, ‘month’, ‘quarter’ or ‘year’, and they only make sense for date/datetime fields.\n    \n- **offset** ([<i>int</i>](https://docs.python.org/3/library/functions.html#int)) – optional number of groups to skip\n    \n- **limit** ([<i>int</i>](https://docs.python.org/3/library/functions.html#int)) – optional max number of groups to return\n    \n- **orderby** ([<i>str</i>](https://docs.python.org/3/library/stdtypes.html#str)) – optional `order by` specification, for overriding the natural sort ordering of the groups, see also `search()` (supported only for many2one fields currently)\n    \n- **lazy** ([<i>bool</i>](https://docs.python.org/3/library/functions.html#bool)) – if true, the results are only grouped by the first groupby and the remaining groupbys are put in the __context key. If false, all the groupbys are done in one call.\n    \n\n#### Returns\n\nThe \\`[read_group](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html?highlight=name_search#odoo.models.Model.read_group)\\` list of dictionaries(one dictionary for each record) containing:\n\n- the values of fields grouped by the fields in `groupby` argument\n    \n- __domain: list of tuples specifying the search criteria\n    \n- __context: dictionary with argument like `groupby`\n    \n- mapping to a dictionary with keys: “from” (inclusive) and “to” (exclusive) mapping to a string representation of the temporal bounds of the group\n    \n\n\\`\\[{‘field_name_1’: value, …}, …\\]\\`"
				},
				{
					"name": "Create records",
					"item": [
						{
							"name": "Create record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const lodash = require('lodash');",
											"const moment = require('moment');",
											"const request_id = lodash.random(1000000000,9999999999);",
											"pm.collectionVariables.set(\"request_id\", request_id);",
											"pm.environment.set(\"create_record_identifier\", moment().format((\"YYYY-MM-DD HH:MM:SS\")))",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"set lsat creation value to be used with unlink\", function () {",
											"\tvar jsonData = pm.response.json();",
											"\tpm.response.to.have.status(200);",
											"\tlet last_created_record_id = jsonData.result",
											"\tconsole.log('created record with ID:'+last_created_record_id)",
											"\tpm.collectionVariables.set(\"last_created_record_id\", last_created_record_id)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"call\",\n\t\"params\": {\n\t\t\"service\": \"object\",\n\t\t\"method\": \"execute_kw\",\n\t\t\"args\": [\n\t\t\t\"{{db}}\",\n\t\t\t\"{{uid}}\",\n\t\t\t\"{{password}}\",\n\t\t\t\"res.partner\",\n\t\t\t\"create\",\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Postman record creation test ({{create_record_identifier}})\"\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\t\t\"id\": {{request_id}}\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/jsonrpc",
									"host": [
										"{{url}}"
									],
									"path": [
										"jsonrpc"
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"object\",\n        \"method\": \"execute_kw\",\n        \"args\": [\n            \"{{db}}\",\n            \"{{uid}}\",\n            \"{{password}}\",\n            \"res.partner\",\n            \"create\",\n            [\n                {\n                    \"name\": \"Postmand Test Created Record ({{create_record_identifier}})\"\n                }\n            ]\n        ],\n        \"id\": {{request_id}}\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/jsonrpc",
											"host": [
												"{{url}}"
											],
											"path": [
												"jsonrpc"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": null,\n    \"result\": 7\n}"
								}
							]
						}
					],
					"description": "records of a model are created using [<code>create()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.create). The method creates a single record and returns its database identifier.\n\n[<code>create()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.create) takes a mapping of fields to values, used to initialize the record. For any field which has a default value and is not set through the mapping argument, the default value will be used.\n\n### <u><b>Return</b></u>\n\nThe [<code>create()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.create) returns list \\`\\[\\]\\` of record ids created by the request\n\n### <u><b>Additional Resources</b></u>\n\n- [Odoo Create API Documentation](https://www.odoo.com/documentation/17.0/developer/reference/external_api.html#create-records)\n    \n- [ORM create Method Documentation](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.create)"
				},
				{
					"name": "Update records",
					"item": [
						{
							"name": "Update Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const lodash = require('lodash');",
											"let request_id = lodash.random(1000000000,9999999999);",
											"if (pm.collectionVariables.get('last_created_record_id') === undefined){",
											"\tconst moment = require('moment');",
											"\tconst create_record_identifier = moment().format((\"YYYY-MM-DD HH:MM:SS\"));",
											"\t// More about pm.sendrequest type raw",
											"\t// https://learning.postman.com/docs/tests-and-scripts/write-scripts/postman-sandbox-api-reference/#sending-requests-from-scripts",
											"\tconst postRecordCreationRequest = {",
											"\t\t\turl: pm.collectionVariables.get('url')+'/jsonrpc',",
											"\t\t\tmethod: 'POST',",
											"\t\t\theader: {",
											"\t\t\t\t\t'Content-Type': 'application/json',",
											"\t\t\t},",
											"\t\t\tbody: {",
											"\t\t\t\t\tmode: 'raw',",
											"\t\t\t\t\traw: JSON.stringify({",
											"\t\t\t\t\t\t\t\"jsonrpc\": \"2.0\",",
											"\t\t\t\t\t\t\t\"method\": \"call\",",
											"\t\t\t\t\t\t\t\"params\": {",
											"\t\t\t\t\t\t\t\t\t\"service\": \"object\",",
											"\t\t\t\t\t\t\t\t\t\"method\": \"execute_kw\",",
											"\t\t\t\t\t\t\t\t\t\"args\": [",
											"\t\t\t\t\t\t\t\t\t\t\tpm.collectionVariables.get('db'),",
											"\t\t\t\t\t\t\t\t\t\t\tpm.collectionVariables.get('uid'),",
											"\t\t\t\t\t\t\t\t\t\t\tpm.collectionVariables.get('password'),",
											"\t\t\t\t\t\t\t\t\t\t\t\"res.partner\",",
											"\t\t\t\t\t\t\t\t\t\t\t\"create\",",
											"\t\t\t\t\t\t\t\t\t\t\t[",
											"\t\t\t\t\t\t\t\t\t\t\t\t\t{",
											"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"name\": \"Postman record creation test \"+create_record_identifier,",
											"\t\t\t\t\t\t\t\t\t\t\t\t\t}",
											"\t\t\t\t\t\t\t\t\t\t\t]\t",
											"\t\t\t\t\t\t\t\t\t],",
											"\t\t\t\t\t\t\t\t\t\"id\": request_id",
											"\t\t\t\t\t\t\t}",
											"\t\t\t\t\t})",
											"\t\t\t}",
											"\t};",
											"",
											"\tpm.sendRequest(postRecordCreationRequest, function (error, response) {",
											"\t\t\tif (error) {",
											"\t\t\t\t\tconsole.log(error);",
											"\t\t\t}else {",
											"\t\t\t\t\tpm.expect(error).to.equal(null);",
											"\t\t\t\t\tpm.expect(response).to.have.property('code', 200);",
											"\t\t\t\t\tpm.expect(response).to.have.property('status', 'OK');",
											"\t\t\t\t\t\t\tconsole.log('Parnter record created with ID: '+response.json().result + ', for deletion');",
											"\t\t\t\t\tpm.collectionVariables.set(\"last_created_record_id\", response.json().result);",
											"\t\t\t}",
											"\t});",
											"\trequest_id = lodash.random(1000000000,9999999999);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"call\",\n\t\"params\": {\n\t\t\"service\": \"object\",\n\t\t\"method\": \"execute_kw\",\n\t\t\"args\": [\n\t\t\t\"{{db}}\",\n\t\t\t\"{{uid}}\",\n\t\t\t\"{{password}}\",\n\t\t\t\"res.partner\",\n\t\t\t\"write\",\n\t\t\t[\n\t\t\t\t[{{last_created_record_id}}],\n\t\t\t\t{\n\t\t\t\t\t\"email\": \"postman.test@exaaple.com\"\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\t\t\"id\": {{request_id}}\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/jsonrpc",
									"host": [
										"{{url}}"
									],
									"path": [
										"jsonrpc"
									]
								}
							},
							"response": [
								{
									"name": "Update Record",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"call\",\n\t\"params\": {\n\t\t\"service\": \"object\",\n\t\t\"method\": \"execute_kw\",\n\t\t\"args\": [\n\t\t\t\"{{db}}\",\n\t\t\t\"{{uid}}\",\n\t\t\t\"{{password}}\",\n\t\t\t\"res.partner\",\n\t\t\t\"create\",\n\t\t\t[\n\t\t\t\t[{{last_created_record_id}}],\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Postman record creation test ({{create_record_identifier}})\"\n\t\t\t\t}\n\t\t\t]\n\t\t],\n\t\t\"id\": {{request_id}}\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": null,\n    \"result\": true\n}"
								}
							]
						}
					],
					"description": "Records can be updated using [<code>write()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.write). It takes a list of records to update and a mapping of updated fields to values similar to [<code>create()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.create).\n\nMultiple records can be updated simultaneously, but they will all get the same values for the fields being set. It is not possible to perform “computed” updates (where the value being set depends on an existing value of a record).\n\n### <u><b>Return</b></u>\n\nThe [<code>write()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.write) returns boolean indicateing the write operation was success or fail.\n\n### <u><b>Additional Resources</b></u>\n\n- [Odoo write API Documentation](https://www.odoo.com/documentation/17.0/developer/reference/external_api.html#update-records)\n    \n- [ORM write Method Documentation](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.write)"
				},
				{
					"name": "Delete records",
					"item": [
						{
							"name": "Delete Record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const lodash = require('lodash');",
											"let request_id = lodash.random(1000000000,9999999999);",
											"if (pm.collectionVariables.get('last_created_record_id') === undefined){",
											"\tconst moment = require('moment');",
											"\tconst create_record_identifier = moment().format((\"YYYY-MM-DD HH:MM:SS\"));",
											"\t// More about pm.sendrequest type raw",
											"\t// https://learning.postman.com/docs/tests-and-scripts/write-scripts/postman-sandbox-api-reference/#sending-requests-from-scripts",
											"\tconst postRecordCreationRequest = {",
											"\t\t\turl: pm.collectionVariables.get('url')+'/jsonrpc',",
											"\t\t\tmethod: 'POST',",
											"\t\t\theader: {",
											"\t\t\t\t\t'Content-Type': 'application/json',",
											"\t\t\t},",
											"\t\t\tbody: {",
											"\t\t\t\t\tmode: 'raw',",
											"\t\t\t\t\traw: JSON.stringify({",
											"\t\t\t\t\t\t\t\"jsonrpc\": \"2.0\",",
											"\t\t\t\t\t\t\t\"method\": \"call\",",
											"\t\t\t\t\t\t\t\"params\": {",
											"\t\t\t\t\t\t\t\t\t\"service\": \"object\",",
											"\t\t\t\t\t\t\t\t\t\"method\": \"execute_kw\",",
											"\t\t\t\t\t\t\t\t\t\"args\": [",
											"\t\t\t\t\t\t\t\t\t\t\tpm.collectionVariables.get('db'),",
											"\t\t\t\t\t\t\t\t\t\t\tpm.collectionVariables.get('uid'),",
											"\t\t\t\t\t\t\t\t\t\t\tpm.collectionVariables.get('password'),",
											"\t\t\t\t\t\t\t\t\t\t\t\"res.partner\",",
											"\t\t\t\t\t\t\t\t\t\t\t\"create\",",
											"\t\t\t\t\t\t\t\t\t\t\t[",
											"\t\t\t\t\t\t\t\t\t\t\t\t\t{",
											"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"name\": \"Postman record creation test \"+create_record_identifier,",
											"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"email\": \"test.email@exmaple.com\"",
											"\t\t\t\t\t\t\t\t\t\t\t\t\t}",
											"\t\t\t\t\t\t\t\t\t\t\t]\t",
											"\t\t\t\t\t\t\t\t\t],",
											"\t\t\t\t\t\t\t\t\t\"id\": request_id",
											"\t\t\t\t\t\t\t}",
											"\t\t\t\t\t})",
											"\t\t\t}",
											"\t};",
											"",
											"\tpm.sendRequest(postRecordCreationRequest, function (error, response) {",
											"\t\t\tif (error) {",
											"\t\t\t\t\tconsole.log(error);",
											"\t\t\t}else {",
											"\t\t\t\t\tpm.expect(error).to.equal(null);",
											"\t\t\t\t\tpm.expect(response).to.have.property('code', 200);",
											"\t\t\t\t\tpm.expect(response).to.have.property('status', 'OK');",
											"\t\t\t\t\t\t\tconsole.log('Parnter record created with ID: '+response.json().result + ', for deletion');",
											"\t\t\t\t\tpm.collectionVariables.set(\"last_created_record_id\", response.json().result);",
											"\t\t\t}",
											"\t});",
											"\trequest_id = lodash.random(1000000000,9999999999);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"object\",\n        \"method\": \"execute\",\n        \"args\": [\n            \"{{db}}\",\n            {{uid}},\n            \"{{password}}\",\n            \"res.partner\",\n            \"unlink\",\n            [{{last_created_record_id}}]\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/jsonrpc",
									"host": [
										"{{url}}"
									],
									"path": [
										"jsonrpc"
									]
								}
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"call\",\n    \"params\": {\n        \"service\": \"object\",\n        \"method\": \"execute\",\n        \"args\": [\n            \"{{db}}\",\n            {{uid}},\n            \"{{password}}\",\n            \"res.partner\",\n            \"unlink\",\n            [{{test_record_tobe_deleted}}]\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/jsonrpc",
											"host": [
												"{{url}}"
											],
											"path": [
												"jsonrpc"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": null,\n    \"result\": true\n}"
								}
							]
						}
					],
					"description": "Records can be deleted in bulk by providing their ids to [<code>unlink()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.unlink).\n\n### <u><b>Return</b></u>\n\nThe [<code>unlink()</code>](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.unlink) returns boolean indicateing weather the unlink operation was success or fail.\n\n### <u><b>Additional Resources</b></u>\n\n- [Odoo unlink API Documentation](https://www.odoo.com/documentation/17.0/developer/reference/external_api.html#delete-records)\n    \n- [ORM unlink Method Documentation](https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#odoo.models.Model.unlink)"
				}
			],
			"description": "Odoo exposes all object/model API using `object` services on the server and the all Model ORM method cal be called over `object` services using method`execute_kw` takes the following parameters:\n\n- the database to use, a string \\[i.e. \\`db\\` set in collection enviroment\\]\n    \n- the user id (retrieved through `authenticate`), an integer \\[i.e. `uid` set in collection enviroment\\]\n    \n- the user’s password, a string (i.e. \\`password\\` set in collection enviroment\\]\n    \n- the model name, a string\n    \n- the method name, a string\n    \n- an array/list of parameters passed by position\n    \n- a mapping/dict of parameters to pass by keyword (optional)\n    \n\nRead more about here: [https://www.odoo.com/documentation/17.0/developer/reference/external_api.html#calling-methods](https://www.odoo.com/documentation/17.0/developer/reference/external_api.html#calling-methods)\n\n<u><b>** All operations (CRUD) or any business method called over API are subject to Odoo Record Rules (RR - Data access ) and Access Contorl List (ACL - Opertional security) assgined ot user. **</b></u>\n\nJSONRPC has been part of Odoo / OpenERP ling time support his many verison of Odoo.\n\n- Github Introduction of JSONRPC with new API:\n    \n    - [https://github.com/odoo/odoo/commit/a56909360679351c5148038259c00a89161c0bc0](https://github.com/odoo/odoo/commit/a56909360679351c5148038259c00a89161c0bc0)\n        \n- Current state of JSONRPC (it has been now moved leavrage \\`odoo.http.request\\` along side XMLRPC end point as well)\n    \n    - [https://github.com/odoo/odoo/blob/17.0/odoo/addons/base/controllers/rpc.py](https://github.com/odoo/odoo/blob/17.0/odoo/addons/base/controllers/rpc.py)"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://edu-apidemo.odoo.com",
			"type": "string"
		},
		{
			"key": "db",
			"value": "edu-apidemo",
			"type": "string"
		},
		{
			"key": "username",
			"value": "{{username}}",
			"type": "string"
		},
		{
			"key": "password",
			"value": "{{password}}",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "2",
			"type": "string"
		},
		{
			"key": "request_id",
			"value": "100000000",
			"type": "string"
		},
		{
			"key": "searched_record_ids",
			"value": ""
		},
		{
			"key": "create_record_identifier",
			"value": "",
			"type": "string"
		},
		{
			"key": "last_created_record_id",
			"value": "",
			"type": "string"
		}
	]
}